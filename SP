USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[Trade_Strategy]    Script Date: 11/14/2024 4:06:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[Trade_Strategy](
	@BatchID INT,
	@effictive_date DATETIME
) AS

BEGIN
	DECLARE @Symbol VARCHAR(10),@OrderType VARCHAR(20),	@AccountName VARCHAR(20)
	DECLARE @Price DECIMAL(18, 2),@StopPrice DECIMAL(18, 2),@Cash DECIMAL(18, 2)
	DECLARE @Quantity INT
	DECLARE @TradeID uniqueidentifier,@EntryID uniqueidentifier

	SET @AccountName = 'TFSA'
    SET @Cash = (SELECT CASH FROM Trade_Accounts WHERE AccountName = @AccountName)
	SET @Symbol = (SELECT DISTINCT symbol FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date )


	DECLARE @Open DECIMAL(18, 2), @Low DECIMAL(18, 2), @High DECIMAL(18, 2),@Close DECIMAL(18, 2),@Percent DECIMAL(18, 2),@Open_Percent DECIMAL(18, 2)
	DECLARE @Open_1 DECIMAL(18, 2), @Low_1 DECIMAL(18, 2), @High_1 DECIMAL(18, 2),@Close_1 DECIMAL(18, 2),@Percent_1 DECIMAL(18, 2)
	DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)
	DECLARE @Upper_shadow_1 [decimal](18, 2),@Lower_shadow_1 [decimal](18, 2),@Body_1 [decimal](18, 2)
	DECLARE @QuoteID INT
	DECLARE @effictive_date_2 DATETIME

	SELECT @Low=[low],@High=[high],@Open=[open],@Close=[close],@Percent=[percent],@Upper_shadow =[upper_shadow],@Lower_shadow=[lower_shadow],@Body=[Body],@Open_Percent = [open_percent],@QuoteID = [quoteID]
	FROM BackTest_BatchData WHERE batchID = @BatchID AND effective_date = @effictive_date

	SELECT @Low_1=[low],@High_1=[high],@Open_1=[open],@Close_1=[close],@Percent_1=[percent],@Upper_shadow_1 =[upper_shadow],@Lower_shadow_1=[lower_shadow],@Body_1=[Body]
	FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @QuoteID -1 
	
	SELECT @effictive_date_2 = effective_date FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @QuoteID - 2


	DECLARE @Diff DECIMAL(18, 2)
	SET @Diff = 0.995
	DECLARE @Pattern VARCHAR(20)

	IF (@Close > @Open) AND (@Body > 2.5 OR (@Body +@Lower_shadow)>2.5)--AND (@Lower_shadow < 0.5)AND (@Upper_shadow < 0.5) 
	BEGIN SET @Pattern = 'Buy_LongGreen' END

	IF @Lower_shadow > @Body AND (@Lower_shadow >0.8) AND ( @Upper_shadow < @Lower_shadow*0.7) AND ((@Close > @Open) OR (@Close < @Open AND @Body > -0.5))
	BEGIN SET @Pattern = 'Buy_GreenNeedle' END
	
	IF @Lower_shadow > @Body AND (@Lower_shadow > 1.0) AND ( @Upper_shadow < 0.2) AND ((@Close > @Open) OR (@Close < @Open AND @Body > -0.2))
	BEGIN SET @Pattern = 'Buy_LongNeedle' END

	IF (@Body > 3.0 AND (@Lower_shadow < 0.5) AND (@Upper_shadow < 0.5) AND (@Close < @Open) )
	OR ( (@Body +  @Upper_shadow )> 2.5 AND (@Close < @Open) )
	BEGIN SET @Pattern = 'Sell_LongRed' END

	IF EXISTS (SELECT * FROM Trade_Orders WHERE OrderType IN ('Sell_Peak_M')
					AND TradeNo = (SELECT MAX(TradeNo) FROM Trade_Orders WHERE  AccountName = @AccountName))
	AND EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Peak_M' AND s_date = @effictive_date))
    BEGIN SET @Pattern = 'Buy_RightSide' END
	
	IF EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (s_key='Peak_M' AND s_date BETWEEN @effictive_date_2 AND @effictive_date))
	AND @Percent < -2.0
	AND EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 
	BEGIN SET @Pattern = 'Sell_Peak_M' END

	SELECT @StopPrice =[StopPrice] FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName
	IF @Close < @StopPrice 
	BEGIN SET @Pattern = 'Sell_StopLoss' END

	IF @Pattern IS NOT NULL
	BEGIN PRINT CAST(@effictive_date AS VARCHAR )
		  PRINT @Pattern
	END

--Buy Strategy
IF NOT EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
BEGIN
	--BuyBottom
	IF (@Pattern = 'Buy_LongGreen' OR @Pattern = 'Buy_GreenNeedle' ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_W' AND as_of_date = @effictive_date ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_M' AND as_of_date = @effictive_date ) 
	BEGIN

		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		--SET @StopPrice = (SELECT s_value*@Diff FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
		SET @StopPrice = @Low*@Diff 
		EXEC Trade_ExecuteOrder @effictive_date, @Pattern ,@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	IF (@Pattern = 'Buy_LongNeedle' ) 
	BEGIN
		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		--SET @StopPrice = (SELECT s_value*@Diff FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
		SET @StopPrice = @Low*@Diff 
		EXEC Trade_ExecuteOrder @effictive_date, @Pattern ,@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END
	-- Buy Right Side
	IF (@Pattern = 'Buy_RightSide' ) 
	BEGIN

		DECLARE @Recent_Low DECIMAL(18, 2)
		--SELECT @Recent_Low = s_value FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Low_W' AND s_date = 
		--								(SELECT MAX(s_date) FROM BackTest_Strategy_Peak_V2  WHERE as_of_date = @effictive_date AND s_key='Low_W'))
		SELECT @Recent_Low = MIN(s_value) FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Low_D' )

		SET @Price = @Close
			--print cast (@effictive_date as varchar)
			--print @Price
			--print @Cash
		SET @Quantity = FLOOR((@Cash/@Close)/ 10.0) * 10
		SET @StopPrice = @Recent_Low * @Diff

		EXEC Trade_ExecuteOrder @effictive_date, 'Buy_RightSide', @Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		--END
	END
END

--Sell Strategy
ELSE
BEGIN
--// Stop Loss
	IF @Pattern ='Sell_Peak_M'
	BEGIN

		SET @Price = @Close
		EXEC Trade_ExecuteOrder @effictive_date, 'Sell_Peak_M',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	END 

	IF @Pattern ='Sell_StopLoss'
	BEGIN 
		SET @Price = @StopPrice 
		EXEC Trade_ExecuteOrder @effictive_date, 'Sell_StopLoss',@Symbol, @Price , NULL , @StopPrice , @Cash ,@AccountName 
	END

--Sell Peak_M

--Sell Peak_W
	--IF EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Peak_W' AND s_date = @effictive_date)
	--														OR (as_of_date = @effictive_date_1 AND s_key='Peak_W' AND s_date = @effictive_date_1)
	--														OR (as_of_date = @effictive_date_2 AND s_key='Peak_W' AND s_date = @effictive_date_2)
	--										)
	--AND EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value <-2.0 )
	--And EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 

	--BEGIN
	--		SET @Price = @Close	
	--		EXEC Trade_ExecuteOrder @effictive_date, 'SellPeak_W',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	--END 


    -- Call external broker API to place the trade
END


END

/****** Object:  StoredProcedure [dbo].[Trade_ExecuteOrder]    Script Date: 10/12/2024 9:17:51 PM ******/

USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[Trade_Strategy]    Script Date: 11/15/2024 9:33:22 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[Trade_Strategy](
	@BatchID INT,
	@effictive_date DATETIME
) AS

BEGIN
	DECLARE @Symbol VARCHAR(10),@OrderType VARCHAR(20),	@AccountName VARCHAR(20)
	DECLARE @Price DECIMAL(18, 2),@StopPrice DECIMAL(18, 2),@Cash DECIMAL(18, 2)
	DECLARE @Quantity INT
	DECLARE @TradeID uniqueidentifier,@EntryID uniqueidentifier

	SET @AccountName = 'TFSA'
    SET @Cash = (SELECT CASH FROM Trade_Accounts WHERE AccountName = @AccountName)
	SET @Symbol = (SELECT DISTINCT symbol FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date )


	DECLARE @Open DECIMAL(18, 2), @Low DECIMAL(18, 2), @High DECIMAL(18, 2),@Close DECIMAL(18, 2),@Percent DECIMAL(18, 2),@Open_Percent DECIMAL(18, 2)
	DECLARE @Open_1 DECIMAL(18, 2), @Low_1 DECIMAL(18, 2), @High_1 DECIMAL(18, 2),@Close_1 DECIMAL(18, 2),@Percent_1 DECIMAL(18, 2)
	DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)
	DECLARE @Upper_shadow_1 [decimal](18, 2),@Lower_shadow_1 [decimal](18, 2),@Body_1 [decimal](18, 2)
	DECLARE @QuoteID INT
	DECLARE @effictive_date_2 DATETIME

	SELECT @Low=[low],@High=[high],@Open=[open],@Close=[close],@Percent=[percent],@Upper_shadow =[upper_shadow],@Lower_shadow=[lower_shadow],@Body=[Body],@Open_Percent = [open_percent],@QuoteID = [quoteID]
	FROM BackTest_BatchData WHERE batchID = @BatchID AND effective_date = @effictive_date

	SELECT @Low_1=[low],@High_1=[high],@Open_1=[open],@Close_1=[close],@Percent_1=[percent],@Upper_shadow_1 =[upper_shadow],@Lower_shadow_1=[lower_shadow],@Body_1=[Body]
	FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @QuoteID -1 
	
	SELECT @effictive_date_2 = effective_date FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @QuoteID - 2


	DECLARE @Diff DECIMAL(18, 2)
	SET @Diff = 0.995
	DECLARE @Pattern VARCHAR(20)

	IF (@Close > @Open) AND (@Body > 2.5 OR (@Body +@Lower_shadow)>2.5)--AND (@Lower_shadow < 0.5)AND (@Upper_shadow < 0.5) 
	BEGIN SET @Pattern = 'Buy_LongGreen' END

	IF @Lower_shadow > @Body AND (@Lower_shadow >0.8) AND ( @Upper_shadow < @Lower_shadow*0.7) AND ((@Close > @Open) OR (@Close < @Open AND @Body > -0.5))
	BEGIN SET @Pattern = 'Buy_GreenNeedle' END
	
	IF @Lower_shadow > @Body AND (@Lower_shadow > 1.0) AND ( @Upper_shadow < 0.2) AND ((@Close > @Open) OR (@Close < @Open AND @Body > -0.2))
	BEGIN SET @Pattern = 'Buy_LongNeedle' END

	IF (@Body > 3.0 AND (@Lower_shadow < 0.5) AND (@Upper_shadow < 0.5) AND (@Close < @Open) )
	OR ( (@Body +  @Upper_shadow )> 2.5 AND (@Close < @Open) )
	BEGIN SET @Pattern = 'Sell_LongRed' END

	IF EXISTS (SELECT * FROM Trade_Orders WHERE OrderType IN ('Sell_Peak_M')
					AND TradeNo = (SELECT MAX(TradeNo) FROM Trade_Orders WHERE  AccountName = @AccountName))
	AND EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Peak_M' AND s_date = @effictive_date))
    BEGIN SET @Pattern = 'Buy_RightSide' END
	
	IF EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (s_key='Peak_M' AND s_date BETWEEN @effictive_date_2 AND @effictive_date))
	AND @Percent < -2.0
	AND EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 
	BEGIN SET @Pattern = 'Sell_Peak_M' END

	SELECT @StopPrice =[StopPrice] FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName
	IF @Close < @StopPrice 
	BEGIN SET @Pattern = 'Sell_StopLoss' END

	IF @Pattern IS NOT NULL
	BEGIN PRINT CAST(@effictive_date AS VARCHAR )
		  PRINT @Pattern
	END

--Buy Strategy
IF NOT EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
BEGIN
	--BuyBottom
	IF (@Pattern = 'Buy_LongGreen' OR @Pattern = 'Buy_GreenNeedle' ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_W' AND as_of_date = @effictive_date ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_M' AND as_of_date = @effictive_date ) 
	BEGIN

		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		--SET @StopPrice = (SELECT s_value*@Diff FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
		SET @StopPrice = @Low*@Diff 
		EXEC Trade_ExecuteOrder @effictive_date, @Pattern ,@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	IF (@Pattern = 'Buy_LongNeedle' ) 
	BEGIN
		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		--SET @StopPrice = (SELECT s_value*@Diff FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
		SET @StopPrice = @Low*@Diff 
		EXEC Trade_ExecuteOrder @effictive_date, @Pattern ,@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END
	-- Buy Right Side
	IF (@Pattern = 'Buy_RightSide' ) 
	BEGIN

		DECLARE @Recent_Low DECIMAL(18, 2)
		--SELECT @Recent_Low = s_value FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Low_W' AND s_date = 
		--								(SELECT MAX(s_date) FROM BackTest_Strategy_Peak_V2  WHERE as_of_date = @effictive_date AND s_key='Low_W'))
		SELECT @Recent_Low = MIN(s_value) FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Low_D' )

		SET @Price = @Close
			--print cast (@effictive_date as varchar)
			--print @Price
			--print @Cash
		SET @Quantity = FLOOR((@Cash/@Close)/ 10.0) * 10
		SET @StopPrice = @Recent_Low * @Diff

		EXEC Trade_ExecuteOrder @effictive_date, 'Buy_RightSide', @Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		--END
	END
END

--Sell Strategy
ELSE
BEGIN
--// Stop Loss
	IF @Pattern ='Sell_Peak_M'
	BEGIN

		SET @Price = @Close
		EXEC Trade_ExecuteOrder @effictive_date, 'Sell_Peak_M',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	END 

	IF @Pattern ='Sell_StopLoss'
	BEGIN 
		SET @Price = @StopPrice 
		EXEC Trade_ExecuteOrder @effictive_date, 'Sell_StopLoss',@Symbol, @Price , NULL , @StopPrice , @Cash ,@AccountName 
	END

--Sell Peak_M

--Sell Peak_W
	--IF EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Peak_W' AND s_date = @effictive_date)
	--														OR (as_of_date = @effictive_date_1 AND s_key='Peak_W' AND s_date = @effictive_date_1)
	--														OR (as_of_date = @effictive_date_2 AND s_key='Peak_W' AND s_date = @effictive_date_2)
	--										)
	--AND EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value <-2.0 )
	--And EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 

	--BEGIN
	--		SET @Price = @Close	
	--		EXEC Trade_ExecuteOrder @effictive_date, 'SellPeak_W',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	--END 


    -- Call external broker API to place the trade
END


END

/****** Object:  StoredProcedure [dbo].[Trade_ExecuteOrder]    Script Date: 10/12/2024 9:17:51 PM ******/

USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[Trade_Strategy]    Script Date: 11/15/2024 9:33:22 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[Trade_Strategy](
	@BatchID INT,
	@effictive_date DATETIME
) AS

BEGIN
	DECLARE @Symbol VARCHAR(10),@OrderType VARCHAR(20),	@AccountName VARCHAR(20)
	DECLARE @Price DECIMAL(18, 2),@StopPrice DECIMAL(18, 2),@Cash DECIMAL(18, 2)
	DECLARE @Quantity INT
	DECLARE @TradeID uniqueidentifier,@EntryID uniqueidentifier

	SET @AccountName = 'TFSA'
    SET @Cash = (SELECT CASH FROM Trade_Accounts WHERE AccountName = @AccountName)
	SET @Symbol = (SELECT DISTINCT symbol FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date )


	DECLARE @Open DECIMAL(18, 2), @Low DECIMAL(18, 2), @High DECIMAL(18, 2),@Close DECIMAL(18, 2),@Percent DECIMAL(18, 2),@Open_Percent DECIMAL(18, 2)
	DECLARE @Open_1 DECIMAL(18, 2), @Low_1 DECIMAL(18, 2), @High_1 DECIMAL(18, 2),@Close_1 DECIMAL(18, 2),@Percent_1 DECIMAL(18, 2)
	DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)
	DECLARE @Upper_shadow_1 [decimal](18, 2),@Lower_shadow_1 [decimal](18, 2),@Body_1 [decimal](18, 2)
	DECLARE @QuoteID INT
	DECLARE @effictive_date_2 DATETIME

	SELECT @Low=[low],@High=[high],@Open=[open],@Close=[close],@Percent=[percent],@Upper_shadow =[upper_shadow],@Lower_shadow=[lower_shadow],@Body=[Body],@Open_Percent = [open_percent],@QuoteID = [quoteID]
	FROM BackTest_BatchData WHERE batchID = @BatchID AND effective_date = @effictive_date

	SELECT @Low_1=[low],@High_1=[high],@Open_1=[open],@Close_1=[close],@Percent_1=[percent],@Upper_shadow_1 =[upper_shadow],@Lower_shadow_1=[lower_shadow],@Body_1=[Body]
	FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @QuoteID -1 
	
	SELECT @effictive_date_2 = effective_date FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @QuoteID - 2


	DECLARE @Diff DECIMAL(18, 2)
	SET @Diff = 0.995
	DECLARE @Pattern VARCHAR(20)

	IF (@Close > @Open) AND (@Body > 2.5 OR (@Body +@Lower_shadow)>2.5)--AND (@Lower_shadow < 0.5)AND (@Upper_shadow < 0.5) 
	BEGIN SET @Pattern = 'Buy_LongGreen' END

	IF @Lower_shadow > @Body AND (@Lower_shadow >0.8) AND ( @Upper_shadow < @Lower_shadow*0.7) AND ((@Close > @Open) OR (@Close < @Open AND @Body > -0.5))
	BEGIN SET @Pattern = 'Buy_GreenNeedle' END
	
	IF @Lower_shadow > @Body AND (@Lower_shadow > 1.0) AND ( @Upper_shadow < 0.2) AND ((@Close > @Open) OR (@Close < @Open AND @Body > -0.2))
	BEGIN SET @Pattern = 'Buy_LongNeedle' END

	IF (@Body > 3.0 AND (@Lower_shadow < 0.5) AND (@Upper_shadow < 0.5) AND (@Close < @Open) )
	OR ( (@Body +  @Upper_shadow )> 2.5 AND (@Close < @Open) )
	BEGIN SET @Pattern = 'Sell_LongRed' END

	IF EXISTS (SELECT * FROM Trade_Orders WHERE OrderType IN ('Sell_Peak_M')
					AND TradeNo = (SELECT MAX(TradeNo) FROM Trade_Orders WHERE  AccountName = @AccountName))
	AND EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Peak_M' AND s_date = @effictive_date))
    BEGIN SET @Pattern = 'Buy_RightSide' END
	
	IF EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (s_key='Peak_M' AND s_date BETWEEN @effictive_date_2 AND @effictive_date))
	AND @Percent < -2.0
	AND EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 
	BEGIN SET @Pattern = 'Sell_Peak_M' END

	SELECT @StopPrice =[StopPrice] FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName
	IF @Close < @StopPrice 
	BEGIN SET @Pattern = 'Sell_StopLoss' END

	IF @Pattern IS NOT NULL
	BEGIN PRINT CAST(@effictive_date AS VARCHAR )
		  PRINT @Pattern
	END

--Buy Strategy
IF NOT EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
BEGIN
	--BuyBottom
	IF (@Pattern = 'Buy_LongGreen' OR @Pattern = 'Buy_GreenNeedle' ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_W' AND as_of_date = @effictive_date ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_M' AND as_of_date = @effictive_date ) 
	BEGIN

		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		--SET @StopPrice = (SELECT s_value*@Diff FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
		SET @StopPrice = @Low*@Diff 
		EXEC Trade_ExecuteOrder @effictive_date, @Pattern ,@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	IF (@Pattern = 'Buy_LongNeedle' ) 
	BEGIN
		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		--SET @StopPrice = (SELECT s_value*@Diff FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
		SET @StopPrice = @Low*@Diff 
		EXEC Trade_ExecuteOrder @effictive_date, @Pattern ,@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END
	-- Buy Right Side
	IF (@Pattern = 'Buy_RightSide' ) 
	BEGIN

		DECLARE @Recent_Low DECIMAL(18, 2)
		--SELECT @Recent_Low = s_value FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Low_W' AND s_date = 
		--								(SELECT MAX(s_date) FROM BackTest_Strategy_Peak_V2  WHERE as_of_date = @effictive_date AND s_key='Low_W'))
		SELECT @Recent_Low = MIN(s_value) FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Low_D' )

		SET @Price = @Close
			--print cast (@effictive_date as varchar)
			--print @Price
			--print @Cash
		SET @Quantity = FLOOR((@Cash/@Close)/ 10.0) * 10
		SET @StopPrice = @Recent_Low * @Diff

		EXEC Trade_ExecuteOrder @effictive_date, 'Buy_RightSide', @Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		--END
	END
END

--Sell Strategy
ELSE
BEGIN
--// Stop Loss
	IF @Pattern ='Sell_Peak_M'
	BEGIN

		SET @Price = @Close
		EXEC Trade_ExecuteOrder @effictive_date, 'Sell_Peak_M',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	END 

	IF @Pattern ='Sell_StopLoss'
	BEGIN 
		SET @Price = @StopPrice 
		EXEC Trade_ExecuteOrder @effictive_date, 'Sell_StopLoss',@Symbol, @Price , NULL , @StopPrice , @Cash ,@AccountName 
	END

--Sell Peak_M

--Sell Peak_W
	--IF EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (as_of_date = @effictive_date AND s_key='Peak_W' AND s_date = @effictive_date)
	--														OR (as_of_date = @effictive_date_1 AND s_key='Peak_W' AND s_date = @effictive_date_1)
	--														OR (as_of_date = @effictive_date_2 AND s_key='Peak_W' AND s_date = @effictive_date_2)
	--										)
	--AND EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value <-2.0 )
	--And EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 

	--BEGIN
	--		SET @Price = @Close	
	--		EXEC Trade_ExecuteOrder @effictive_date, 'SellPeak_W',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	--END 


    -- Call external broker API to place the trade
END


END

/****** Object:  StoredProcedure [dbo].[Trade_ExecuteOrder]    Script Date: 10/12/2024 9:17:51 PM ******/

USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Strategy_01_Peak_V2]    Script Date: 11/15/2024 9:33:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[BackTest_Strategy_01_Peak_V2]
@BatchID INT,
@OutputDateTime DATETIME OUTPUT
	-- Add the parameters for the stored procedure here
AS
BEGIN
SET NOCOUNT ON

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

CREATE TABLE #BackTest_Prices(
	[batchID] [INT] NOT NULL,
	[BatchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[effective_date] [date] NULL,
	[percent] [decimal](18, 2) NULL,
	[Peak_High_D] [bit] NULL,
	[Peak_Low_D] [bit] NULL,
	[Peak_High_W] [bit] NULL,
	[Peak_Low_W] [bit] NULL,
	[Peak_High_M] [bit] NULL,
	[Peak_Low_M] [bit] NULL)

INSERT INTO #BackTest_Prices
([batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date])
SELECT [batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date]
FROM [BackTest_BatchData]
WHERE batchID = @BatchID

DECLARE @Diff_Percent DECIMAL (10,4)
SET @Diff_Percent = 0

DECLARE @Bar_Gap_D INT,@Bar_Gap_W INT,@Bar_Gap_M INT
SET @Bar_Gap_D=1
SET @Bar_Gap_W=5
SET @Bar_Gap_M=15

DECLARE @Low_QuoteID_D INT,@High_QuoteID_D INT,@Low_QuoteID_W INT,@High_QuoteID_W INT,@Low_QuoteID_M INT,@High_QuoteID_M INT

DECLARE @LoopID INT,@Max_QuoteID INT
DECLARE @Max_EffectiveDate DATETIME

SET @LoopID = 1
SELECT @Max_QuoteID = MAX(quoteID ) FROM #BackTest_Prices WHERE batchID = @BatchID
SELECT @Max_EffectiveDate = effective_date FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID



WHILE (@LoopID + @Bar_Gap_D) <= @Max_QuoteID
BEGIN
	-- Interval: Daily

    SELECT @Low_QuoteID_D= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_D) )
		   )x
    WHERE Low_RowNum = 1 

	SELECT @High_QuoteID_M = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_D) )
		   ) x
    WHERE High_RowNum =1

	UPDATE T
	SET T.Peak_High_D = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID_D AND T.Peak_High_D IS NULL

	UPDATE T
	SET T.Peak_High_D = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID_D AND (@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_D)
	
	UPDATE T
	SET T.Peak_Low_D = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID_D AND T.Peak_Low_D IS NULL

	UPDATE T
	SET T.Peak_Low_D = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID_D AND (@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_D)

	-- Interval: Month
	SELECT @Low_QuoteID_M= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_M) )
		   )x
    WHERE Low_RowNum = 1 

	SELECT @High_QuoteID_M = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_M) )
		   ) x
    WHERE High_RowNum =1

	UPDATE T
	SET T.Peak_High_M = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID_M AND T.Peak_High_M IS NULL

	UPDATE T
	SET T.Peak_High_M = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID_M AND (@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_M)
	
	UPDATE T
	SET T.Peak_Low_M = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID_M AND T.Peak_Low_M IS NULL

	UPDATE T
	SET T.Peak_Low_M = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID_M AND (@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_M)

	-- Interval: Weekly
	SELECT @Low_QuoteID_W= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_W) )
		   )x
    WHERE Low_RowNum = 1 
	
	SELECT @High_QuoteID_W = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_W) )
		   ) x
    WHERE High_RowNum =1

	UPDATE T
	SET T.Peak_High_W = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID_W AND T.Peak_High_W IS NULL

	UPDATE T
	SET T.Peak_High_W = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID_W AND (@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_W)
	
	UPDATE T
	SET T.Peak_Low_W = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID_W AND T.Peak_Low_W IS NULL

	UPDATE T
	SET T.Peak_Low_W = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID_W AND (@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_W)

	SET @LoopID=@LoopID+1
END

-- Peak and Low
INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High_D =1 THEN 'Peak_D' WHEN Peak_Low_D=1 THEN 'Low_D' 
		END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High_D =1 THEN [high] WHEN Peak_Low_D=1 THEN [Low] 
		END AS s_value, 
		GETDATE() 
FROM #BackTest_Prices
WHERE (Peak_High_D =1 OR Peak_Low_D =1 ) AND effective_date > DATEADD(DAY,-20,@Max_EffectiveDate)


INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High_W =1 THEN 'Peak_W' WHEN Peak_Low_W=1 THEN 'Low_W' 
		END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High_W =1 THEN [high] WHEN Peak_Low_W=1 THEN [Low] 
		END AS s_value, 
		GETDATE() 
FROM #BackTest_Prices
WHERE (Peak_High_W =1 OR Peak_Low_W =1 )AND effective_date > DATEADD(DAY,-100,@Max_EffectiveDate)

INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High_M =1 THEN 'Peak_M' WHEN Peak_Low_M=1 THEN 'Low_M' 
		END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High_M =1 THEN [high] WHEN Peak_Low_M=1 THEN [Low] 
		END AS s_value, 
		GETDATE() 
FROM #BackTest_Prices
WHERE Peak_High_M =1 OR Peak_Low_M =1

-- Percent and Daily
--SELECT @Last_Close =  (SELECT [close] FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID -1 )
--SELECT @Current_Close =  (SELECT [close] FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID)
--SET @Last_Close = ISNULL(@Last_Close,@Current_Close)

--UPDATE T
--SET T.[percent] = (@Current_Close-@Last_Close)/@Last_Close*100
--FROM #BackTest_Prices T
--WHERE quoteID = @Max_QuoteID

--INSERT INTO BackTest_Strategy_Peak_V2
--(symbol,as_of_date,s_key,s_date,s_value,update_date)
--SELECT symbol,effective_date as as_of_date, s_key ,NULL,s_value,GETDATE()
--FROM (SELECT symbol,effective_date,[low],[high],[open],[close],[percent] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID) P
--UNPIVOT  (s_value FOR s_key IN ([low],[high],[open],[close],[percent]))AS unpvt

--Needle Pattern
--DECLARE @Open [decimal](18, 2),@High [decimal](18, 2),@Close [decimal](18, 2),@Low [decimal](18, 2)
--DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)

--SELECT @Low  =[low],@High = [high],@Open=[open],@Close=[close] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID

--SET @Upper_shadow = (@High - CASE WHEN @Open > @Close THEN @Open ELSE @Close END) / @Open *100
--SET @Lower_shadow = (CASE WHEN @Open < @Close THEN @Open ELSE @Close END - @Low) / @Open  * 100
--SET @Body = ABS(@Close-@Open)/@Open * 100

--IF @Lower_shadow > @Body 
--AND (@Lower_shadow >0.8)
--AND (@Upper_shadow < @Lower_shadow*0.7) 
--AND ((@Close > @Open) OR (@Close < @Open AND @Body < 0.5))

--BEGIN
--	INSERT INTO BackTest_Strategy_Peak_V2
--	(symbol,as_of_date,s_key,s_date,s_value,update_date)
--	SELECT symbol,effective_date as as_of_date,'Needle',NULL,@Lower_shadow,GETDATE()
--	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
--END 

--IF (@Close > @Open)
----AND (@Lower_shadow < 0.5)
----AND (@Upper_shadow < 0.5) 
--AND (@Body > 2.5 OR (@Body +@Lower_shadow)>2.5)


--BEGIN
--	INSERT INTO BackTest_Strategy_Peak_V2
--	(symbol,as_of_date,s_key,s_date,s_value,update_date)
--	SELECT symbol,effective_date as as_of_date,'LongGreen',NULL,@Lower_shadow,GETDATE()
--	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
--END 


--IF @Body > 2.5
--AND (@Lower_shadow < 0.5)
--AND (@Upper_shadow < 0.5) 
--AND (@Close < @Open)

--BEGIN
--	INSERT INTO BackTest_Strategy_Peak_V2
--	(symbol,as_of_date,s_key,s_date,s_value,update_date)
--	SELECT symbol,effective_date as as_of_date,'LongRed',NULL,@Lower_shadow,GETDATE()
--	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
--END 

--IF (@Close - @High)/@Close *100 <-2.0

--BEGIN
--	INSERT INTO BackTest_Strategy_Peak_V2
--	(symbol,as_of_date,s_key,s_date,s_value,update_date)
--	SELECT symbol,effective_date as as_of_date,'Red2',NULL, (@Close - @High)/@Close *100,GETDATE()
--	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
--END 

--DECLARE @Open [decimal](18, 2),@High [decimal](18, 2),@Close [decimal](18, 2),@Low [decimal](18, 2)
--DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)
--DECLARE @Symbol VARCHAR(10)
--SELECT @Symbol=[symbol],@Low  =[low],@High = [high],@Open=[open],@Close=[close] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID

--SET @Upper_shadow = (@High - CASE WHEN @Open > @Close THEN @Open ELSE @Close END) / @Open *100
--SET @Lower_shadow = (CASE WHEN @Open < @Close THEN @Open ELSE @Close END - @Low) / @Open  * 100
--SET @Body = (@Close-@Open)/@Open * 100

--INSERT INTO BackTest_Strategy_Peak_V2
--(symbol,as_of_date,s_key,s_date,s_value,update_date)
--VALUES(@Symbol, @Max_EffectiveDate,'Upper_shadow',NULL, @Upper_shadow,GETDATE()),
--(@Symbol, @Max_EffectiveDate,'Lower_shadow',NULL, @Lower_shadow,GETDATE()),
--(@Symbol, @Max_EffectiveDate,'Body',NULL, @Body,GETDATE())

SET @OutputDateTime =@Max_EffectiveDate

-- All Time High


END
USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Strategy_01_MACD_V2]    Script Date: 11/15/2024 9:33:03 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[BackTest_Strategy_01_MACD_V2]
@BatchID INT
	-- Add the parameters for the stored procedure here
AS
BEGIN
SET NOCOUNT ON

DECLARE @MaxQuoteID INT

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

CREATE TABLE #BackTest_Prices(
	[batchID] [INT] NOT NULL,
	[BatchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[effective_date] [date] NULL,
	[SMA5] [decimal](18, 2) NULL,
	[SMA10] [decimal](18, 2) NULL,
	[SMA20] [decimal](18, 2) NULL,
	[SMA50] [decimal](18, 2) NULL,
	[SMA100] [decimal](18, 2) NULL,
	[SMA200] [decimal](18, 2) NULL,
	[EMA5] [decimal](18, 2) NULL,
	[EMA12] [decimal](18, 2) NULL,
	[EMA26] [decimal](18, 2) NULL,
) 

INSERT INTO #BackTest_Prices
([batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date])
SELECT [batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date]
FROM [BackTest_BatchData]
WHERE batchID = @BatchID

SET @MaxQuoteID = (SELECT MAX(QuoteID) FROM #BackTest_Prices WHERE batchID = @BatchID)

UPDATE P
SET P.SMA5 =NULL,P.SMA10 =NULL, P.SMA20 =NULL, P.SMA50 = NULL,P.SMA100 =NULL,P.SMA200 =NULL, P.EMA5 = NULL, P.EMA12 = NULL, P.EMA26 = NULL
FROM #BackTest_Prices P 
WHERE batchID= @BatchID


UPDATE T0
SET SMA5 = T1.SMA5,
	SMA10 = T1.SMA10,
	SMA20 = T1.SMA20,
	SMA50 = T1.SMA50,
	SMA100 =T1.SMA100,
	SMA200 = T1.SMA200 
FROM #BackTest_Prices T0 INNER JOIN (SELECT quoteID,CASE WHEN quoteID<5 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 4 PRECEDING) END AS SMA5,
												   CASE WHEN quoteID<10 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 9 PRECEDING) END AS SMA10,
												   CASE WHEN quoteID<20 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 19 PRECEDING) END AS SMA20,
												   CASE WHEN quoteID<50 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 49 PRECEDING) END AS SMA50,
												   CASE WHEN quoteID<100 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 99 PRECEDING) END AS SMA100,
												   CASE WHEN quoteID<200 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 199 PRECEDING) END AS SMA200
									FROM #BackTest_Prices WHERE batchID= @BatchID) T1 ON T0.quoteID=T1.QuoteID
WHERE batchID= @BatchID

DECLARE @start_Avg5 DECIMAL(18,2)
DECLARE @Start_Avg12 DECIMAL(18,2)
DECLARE @Start_Avg26 DECIMAL(18,2)

DECLARE @EMA5 FLOAT
DECLARE @EMA12 FLOAT
DECLARE @EMA26 FLOAT

SELECT @Start_Avg5 = AVG([Close])  FROM #BackTest_Prices WHERE batchID=@BatchID AND QuoteId <= 5 
SELECT @Start_Avg12 = AVG([Close])  FROM #BackTest_Prices WHERE batchID=@BatchID AND QuoteId <= 12 
SELECT @Start_Avg26 = AVG([Close])  FROM #BackTest_Prices WHERE batchID=@BatchID AND QuoteId <= 26 

DECLARE @C_5 FLOAT = 2.0 / (1 + 5)
DECLARE @C_12 FLOAT = 2.0 / (1 + 12)
DECLARE @C_26 FLOAT = 2.0 / (1 + 26)

UPDATE P
SET    @EMA5 = CASE WHEN QuoteId < 5 THEN NULL
					 WHEN QuoteId = 5 THEN @Start_Avg5
					 WHEN QuoteId > 5 THEN P.[Close] * @C_5 + @EMA5 * (1 - @C_5)
                END
	  ,EMA5 = @EMA5
	  ,@EMA12 = CASE WHEN QuoteId < 12 THEN NULL
					 WHEN QuoteId = 12 THEN @Start_Avg12
					 WHEN QuoteId > 12 THEN P.[Close] * @C_12 + @EMA12 * (1 - @C_12)
                END
	  ,EMA12 = @EMA12
	  ,@EMA26 = CASE WHEN QuoteId < 26 THEN NULL
					 WHEN QuoteId = 26 THEN @Start_Avg26
					 WHEN QuoteId > 26 THEN P.[Close] * @C_26 + @EMA26 * (1 - @C_26)
			   END
      ,EMA26 = @EMA26
FROM #BackTest_Prices P WHERE batchID=@BatchID

INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT symbol,effective_date as as_of_date, s_key ,NULL,s_value,GETDATE()
FROM (SELECT symbol,effective_date,SMA5,SMA10,SMA20,SMA50,SMA100,SMA200,EMA5,EMA12,EMA26 FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@MaxQuoteID) P
UNPIVOT  (s_value FOR s_key IN (SMA5,SMA10,SMA20,SMA50,SMA100,SMA200,EMA5,EMA12,EMA26))AS unpvt

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

END
USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Loop]    Script Date: 11/15/2024 9:32:40 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[BackTest_Loop] 
	@symbol NVARCHAR(20),
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN
SET NOCOUNT ON
DECLARE @Date_Loop DATETIME
SET @Date_Loop = @StartDate

WHILE (@Date_Loop<= @EndDate)
BEGIN
	DECLARE @BatchID INT
	DECLARE @As_Of_Date DATETIME
	--SET @Date_Loop = (SELECT CAST(CAST(MIN (TRADE_TIME) AS DATE) AS DATETIME) FROM Market_EOD WHERE Trade_Time >= @Date_Loop)
	SET @Date_Loop = (SELECT MIN (TRADE_TIME) FROM Market_EOD WHERE Trade_Time >= @Date_Loop)
	
	EXEC @BatchID = BackTest_Batch @symbol,@StartDate,@Date_Loop
	EXEC [BackTest_Strategy_01_MACD_V2] @BatchID
	EXEC [BackTest_Strategy_01_Peak_V2] @BatchID, @OutputDateTime = @As_Of_Date OUTPUT
	EXEC [Trade_Strategy] @BatchID,@As_Of_Date

	SET @Date_Loop = DATEADD(DD,1,@Date_Loop)
END

END 
USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Batch]    Script Date: 11/15/2024 9:32:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[BackTest_Batch] 
	@symbol NVARCHAR(20),
	@StartDate DATETIME,
	@EndDate DATETIME


AS
BEGIN
SET NOCOUNT ON
DECLARE @Effective_Date_Loop DATETIME

DECLARE @quoteID INT
DECLARE @BatchID INT

DECLARE @BatchDate DATETIME


SET @Effective_Date_Loop = (SELECT MIN([Trade_Time]) FROM dbo.Market_EOD	WHERE symbol =@symbol AND [Trade_Time] >= @StartDate)

SET @BatchDate = GETDATE()
SET @BatchID = CONCAT(DATEPART(HOUR,@BatchDate),DATEPART(MINUTE,@BatchDate),DATEPART(SECOND,@BatchDate),DATEPART(millisecond,GETDATE()))
SET @quoteID=1

IF OBJECT_ID('tempdb..#TB') IS NOT NULL 
BEGIN
    DROP TABLE #TB
END

SELECT [symbol],[low],[high],[open],[close],[Trade_Time]
INTO #TB
FROM dbo.Market_EOD
WHERE symbol =@symbol AND [Trade_Time] > = @Effective_Date_Loop AND [Trade_Time]< @EndDate
CREATE UNIQUE CLUSTERED INDEX TB_IDX ON #TB ([Trade_Time])

DECLARE @Last_Close [decimal](18, 2),@Current_Close [decimal](18, 2),@Current_Open [decimal](18, 2)

WHILE (@Effective_Date_Loop<@EndDate)
BEGIN

	INSERT INTO BackTest_BatchData
	([batchID],[BatchDate],[symbol],[low],[high],[open],[close],[effective_date],quoteID,[upper_shadow],[lower_shadow],[body])
	SELECT @BatchID,@BatchDate,[symbol],[low],[high],[open],[close],[Trade_Time],@quoteID,
	([high] - CASE WHEN [open] > [close] THEN [open] ELSE [close] END) / [open] *100  AS upper_shadow,
	(CASE WHEN [open] < [close] THEN [open] ELSE [close] END - [low]) / [open]  * 100 AS lower_shadow,
	([close]-[open])/[open] * 100
	FROM #TB
	WHERE [Trade_Time] = @Effective_Date_Loop

	SELECT @Last_Close = [close] FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @quoteID -1 
	SELECT @Current_Close = [close],@Current_Open = [open] FROM BackTest_BatchData WHERE batchID = @BatchID AND quoteID = @quoteID
	SET @Last_Close = ISNULL(@Last_Close,@Current_Close)

	UPDATE T
	SET T.[percent] = (@Current_Close-@Last_Close)/@Last_Close*100,
		T.[open_percent] = (@Current_Open-@Last_Close)/@Last_Close*100
	FROM BackTest_BatchData T
	WHERE quoteID = @quoteID

	SELECT @Effective_Date_Loop = MIN([Trade_Time]) FROM #TB	WHERE [Trade_Time] > @Effective_Date_Loop
	SET @quoteID = @quoteID + 1 

END

RETURN @BatchID
END 

USE [SATS]
GO

/****** Object:  Table [dbo].[BackTest_BatchData]    Script Date: 11/15/2024 9:32:28 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[BackTest_BatchData](
	[batchID] [int] NOT NULL,
	[batchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[percent] [decimal](18, 2) NULL,
	[open_percent] [decimal](18, 2) NULL,
	[upper_shadow] [decimal](18, 2) NULL,
	[lower_shadow] [decimal](18, 2) NULL,
	[Body] [decimal](18, 2) NULL,
	[effective_date] [date] NULL
) ON [PRIMARY]
GO


