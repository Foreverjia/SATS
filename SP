USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[Trade_Strategy]    Script Date: 10/12/2024 9:17:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[Trade_Strategy](
	@effictive_date DATETIME
) AS

BEGIN
	DECLARE @Symbol VARCHAR(10),@OrderType VARCHAR(20),	@AccountName VARCHAR(20)
	DECLARE @Price DECIMAL(18, 2),@StopPrice DECIMAL(18, 2),@Cash DECIMAL(18, 2)
	DECLARE @Quantity INT
	DECLARE @TradeID uniqueidentifier,@EntryID uniqueidentifier
	DECLARE @Open DECIMAL(18, 2), @Low DECIMAL(18, 2), @High DECIMAL(18, 2),@Close DECIMAL(18, 2)

	DECLARE @effictive_date_1 DATETIME,@effictive_date_2 DATETIME, @effictive_date_3 DATETIME

	SET @AccountName = 'TFSA'
    SET @Cash = (SELECT CASH FROM Trade_Accounts WHERE AccountName = @AccountName)
	SET @Symbol = (SELECT DISTINCT symbol FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date )

	SET @Close = (SELECT s_value FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Close')
	SET @Open = (SELECT s_value FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Open')
	SET @Low = (SELECT s_value FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='Low')
	SET @High= (SELECT s_value FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date and s_key ='High')

	SET @effictive_date_1 = (SELECT MAX(as_of_date) FROM BackTest_Strategy_Peak_V2 WHERE as_of_date < @effictive_date)
	SET @effictive_date_2 = (SELECT MAX(as_of_date) FROM BackTest_Strategy_Peak_V2 WHERE as_of_date < @effictive_date_1)
	SET @effictive_date_3 = (SELECT MAX(as_of_date) FROM BackTest_Strategy_Peak_V2 WHERE as_of_date < @effictive_date_2)
	
--Buy Strategy
	IF EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE (s_key = 'LongGreen' OR s_key ='Needle') AND as_of_date = @effictive_date ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_W' AND as_of_date = @effictive_date ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE s_date=@effictive_date AND s_key='Low_M' AND as_of_date = @effictive_date ) AND
	   NOT EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
	BEGIN

		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		SET @StopPrice = (SELECT s_value*0.998 FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date_1 and s_key ='Low')

		EXEC Trade_ExecuteOrder @effictive_date, 'BuyBottom',	@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	IF EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date_1 and s_key ='Needle' ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value >0.2) AND
	   NOT EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
	BEGIN

		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		SET @StopPrice = (SELECT s_value*0.998 FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date_1 and s_key ='Low')

		EXEC Trade_ExecuteOrder @effictive_date, 'BuyNeedle',	@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	IF EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date_1 and s_key ='LongGreen' ) AND
	   EXISTS( SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value >0.2) AND
	   NOT EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
	BEGIN

		SET @Price = @Close
		SET @Quantity = FLOOR((@Cash/@Price)/ 10.0) * 10
		SET @StopPrice = (SELECT s_value*0.998 FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date_1 and s_key ='Low')

		EXEC Trade_ExecuteOrder @effictive_date, 'BuyLong',	@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	IF EXISTS (SELECT * FROM Trade_Orders WHERE OrderType ='StopLoss'
					AND TradeNo = (SELECT MAX(TradeNo) FROM Trade_Orders WHERE  AccountName = @AccountName))
	BEGIN
		DECLARE @EntryPrice DECIMAL(18, 2),@ExitPrice DECIMAL(18, 2)
		SET @EntryPrice = (SELECT EntryPrice FROM Trade_Transactions WHERE ExitID = (SELECT TradeID FROM Trade_Orders WHERE OrderType ='StopLoss' 
								AND TradeNo = (SELECT MAX(TradeNo) FROM Trade_Orders WHERE  AccountName = @AccountName))
								)
		IF (@Close-@EntryPrice)/@Close > 0.2

		SET @Quantity = FLOOR((@Cash/@Close)/ 10.0) * 10
		SET @StopPrice = @ExitPrice
		EXEC Trade_ExecuteOrder @effictive_date, 'BuyRight',	@Symbol, @Price , @Quantity , @StopPrice , @Cash ,	@AccountName 
		
	END

	
--Sell Strategy// Stop Loss
	IF EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
	BEGIN
		SET @StopPrice = (SELECT StopPrice FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
		
		IF @Close < @StopPrice 
		BEGIN 
			SET @Price = @Close		
			EXEC Trade_ExecuteOrder @effictive_date, 'StopLoss',@Symbol, @Price , NULL , @StopPrice , @Cash ,@AccountName 
		END
	END 

	IF EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Peak_M' AND s_date = @effictive_date)
	AND EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value <-2.0 )
	And EXISTS (SELECT * FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName) 
	BEGIN
			SET @Price = @Close
			
			EXEC Trade_ExecuteOrder @effictive_date, 'SellPeak_M',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	END 

	IF EXISTS (SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Peak_W' AND s_date = @effictive_date) AND
	EXISTS(SELECT * FROM BackTest_Strategy_Peak_V2 WHERE as_of_date = @effictive_date AND s_key='Percent' AND s_value <-2.5 )

	BEGIN
			SET @Price = @Close	
			EXEC Trade_ExecuteOrder @effictive_date, 'SellPeak_W',@Symbol, @Price , NULL , NULL , @Cash ,@AccountName 

	END 


    -- Call external broker API to place the trade
END;
USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[Trade_ExecuteOrder]    Script Date: 10/12/2024 9:17:51 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[Trade_ExecuteOrder](
	@effictive_date DATETIME,
	@OrderType VARCHAR(20),
	@Symbol VARCHAR(10),
	@Price DECIMAL(18, 2),
	@Quantity INT,
	@StopPrice DECIMAL(18, 2),
	@Cash DECIMAL(18, 2),
	@AccountName VARCHAR(20)
) AS

BEGIN

DECLARE @TradeID UNIQUEIDENTIFIER
	IF @OrderType like 'Buy%'
	BEGIN

		SET @TradeID = NEWID()

		INSERT INTO Trade_Orders (AccountName,Symbol,TradeID ,OrderType, Price, Quantity,effictive_date, StopPrice,update_time)
		VALUES (@AccountName,@Symbol, @TradeID,@OrderType, @Price, @Quantity, @effictive_date,@StopPrice,GETDATE());

		INSERT INTO Trade_Transactions (AccountName,Symbol,EntryPrice,EntryID,EntryDate,EntryCost,Quantity,StopPrice,Update_Time)
		VALUES (@AccountName,@Symbol,@Price, @TradeID,@effictive_date,@Price*@Quantity,@Quantity,@StopPrice,GETDATE());
		
		UPDATE A
		SET 
			Symbol = @Symbol,
			TradeDate = @effictive_date,
			TradeID = @TradeID,
			Price = @Price,
			Quantity = @Quantity,
			TotalCost = @Price*@Quantity,
			Cash = @Cash - @Price*@Quantity,
			TotalAsset = @Cash
		FROM Trade_Accounts A
		WHERE AccountName = @AccountName

	END 
		
	IF @OrderType = 'StopLoss' OR @OrderType like 'Sell%'
	BEGIN
		DECLARE @EntryID UNIQUEIDENTIFIER
		SET @EntryID = (SELECT EntryID  FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName)
		SET @Quantity = (SELECT Quantity  FROM Trade_Transactions WHERE EntryID IS NOT NULL AND ExitID IS NULL AND AccountName = @AccountName )
		SET @TradeID = NEWID()

		INSERT INTO Trade_Orders (AccountName,Symbol,TradeID ,OrderType, Price, Quantity,effictive_date, update_time)
		VALUES (@AccountName,@Symbol, @TradeID,@OrderType, @Price, @Quantity, @effictive_date,GETDATE());
			   
		UPDATE T
		SET 
			ExitPrice = @Price,
			ExitID = @TradeID,
			ExitDate = @effictive_date,
			ExitCost = @Price * @Quantity,
			Profit = @Price*@Quantity - EntryCost
		FROM Trade_Transactions T
		WHERE T.EntryID = @EntryID 

		UPDATE A
		SET 
			Cash = @Cash + @Price*@Quantity,
			Symbol = NULL,
			TradeDate = NULL,
			TradeID = NULL,
			Price = NULL,
			Quantity = NULL,
			TotalCost = NULL,
			TotalAsset =  @Cash + @Price*@Quantity
		FROM Trade_Accounts A
		WHERE AccountName = @AccountName
	END
END
USE [SATS]
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Strategy_01_Peak_V2]    Script Date: 10/12/2024 9:17:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[BackTest_Strategy_01_Peak_V2]
@BatchID INT,
@OutputDateTime DATETIME OUTPUT
	-- Add the parameters for the stored procedure here
AS
BEGIN
SET NOCOUNT ON

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

CREATE TABLE #BackTest_Prices(
	[batchID] [INT] NOT NULL,
	[BatchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[effective_date] [date] NULL,
	[percent] [decimal](18, 2) NULL,
	[Peak_High_D] [bit] NULL,
	[Peak_Low_D] [bit] NULL,
	[Peak_High_W] [bit] NULL,
	[Peak_Low_W] [bit] NULL,
	[Peak_High_M] [bit] NULL,
	[Peak_Low_M] [bit] NULL)

INSERT INTO #BackTest_Prices
([batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date])
SELECT [batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date]
FROM [BackTest_BatchData]
WHERE batchID = @BatchID

DECLARE @Diff_Percent DECIMAL (10,4)
SET @Diff_Percent = 0

DECLARE @Bar_Gap_D INT,@Bar_Gap_W INT,@Bar_Gap_M INT
SET @Bar_Gap_D=1
SET @Bar_Gap_W=5
SET @Bar_Gap_M=15

DECLARE @Low_QuoteID_D INT,@High_QuoteID_D INT,@Low_QuoteID_W INT,@High_QuoteID_W INT,@Low_QuoteID_M INT,@High_QuoteID_M INT

DECLARE @LoopID INT,@Max_QuoteID INT
DECLARE @Max_EffectiveDate DATETIME

DECLARE @Last_Close [decimal](18, 2),@Current_Close [decimal](18, 2) 

SET @LoopID = 1
SELECT @Max_QuoteID = MAX(quoteID ) FROM #BackTest_Prices WHERE batchID = @BatchID
SELECT @Max_EffectiveDate = effective_date FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID



WHILE (@LoopID + @Bar_Gap_D) <= @Max_QuoteID
BEGIN
	-- Interval: Daily

    SELECT @Low_QuoteID_D= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_D) )
		   )x
    WHERE Low_RowNum = 1 

	SELECT @High_QuoteID_M = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_D) )
		   ) x
    WHERE High_RowNum =1

	UPDATE T
	SET T.Peak_High_D = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID_D AND T.Peak_High_D IS NULL

	UPDATE T
	SET T.Peak_High_D = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID_D AND (@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_D)
	
	UPDATE T
	SET T.Peak_Low_D = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID_D AND T.Peak_Low_D IS NULL

	UPDATE T
	SET T.Peak_Low_D = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID_D AND (@LoopID-@Bar_Gap_D) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_D)

	-- Interval: Month
	SELECT @Low_QuoteID_M= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_M) )
		   )x
    WHERE Low_RowNum = 1 

	SELECT @High_QuoteID_M = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_M) )
		   ) x
    WHERE High_RowNum =1

	UPDATE T
	SET T.Peak_High_M = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID_M AND T.Peak_High_M IS NULL

	UPDATE T
	SET T.Peak_High_M = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID_M AND (@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_M)
	
	UPDATE T
	SET T.Peak_Low_M = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID_M AND T.Peak_Low_M IS NULL

	UPDATE T
	SET T.Peak_Low_M = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID_M AND (@LoopID-@Bar_Gap_M) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_M)

	-- Interval: Weekly
	SELECT @Low_QuoteID_W= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_W) )
		   )x
    WHERE Low_RowNum = 1 
	
	SELECT @High_QuoteID_W = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_W) )
		   ) x
    WHERE High_RowNum =1

	UPDATE T
	SET T.Peak_High_W = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID_W AND T.Peak_High_W IS NULL

	UPDATE T
	SET T.Peak_High_W = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID_W AND (@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap_W)
	
	UPDATE T
	SET T.Peak_Low_W = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID_W AND T.Peak_Low_W IS NULL

	UPDATE T
	SET T.Peak_Low_W = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID_W AND (@LoopID-@Bar_Gap_W) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap_W)

	SET @LoopID=@LoopID+1
END

-- Peak and Low
INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High_D =1 THEN 'Peak_D' WHEN Peak_Low_D=1 THEN 'Low_D' 
		END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High_D =1 THEN [high] WHEN Peak_Low_D=1 THEN [Low] 
		END AS s_value, 

		GETDATE() 
FROM #BackTest_Prices
WHERE (Peak_High_D =1 OR Peak_Low_D =1 ) AND effective_date > DATEADD(DAY,-20,@Max_EffectiveDate)


INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High_W =1 THEN 'Peak_W' WHEN Peak_Low_W=1 THEN 'Low_W' 
		END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High_W =1 THEN [high] WHEN Peak_Low_W=1 THEN [Low] 
		END AS s_value, 

		GETDATE() 
FROM #BackTest_Prices
WHERE (Peak_High_W =1 OR Peak_Low_W =1 )AND effective_date > DATEADD(DAY,-100,@Max_EffectiveDate)

INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High_M =1 THEN 'Peak_M' WHEN Peak_Low_M=1 THEN 'Low_M' 
		END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High_M =1 THEN [high] WHEN Peak_Low_M=1 THEN [Low] 
		END AS s_value, 

		GETDATE() 
FROM #BackTest_Prices
WHERE Peak_High_M =1 OR Peak_Low_M =1

-- Percent and Daily
SELECT @Last_Close =  (SELECT [close] FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID -1 )
SELECT @Current_Close =  (SELECT [close] FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID)
SET @Last_Close = ISNULL(@Last_Close,@Current_Close)

UPDATE T
SET T.[percent] = (@Current_Close-@Last_Close)/@Last_Close*100
FROM #BackTest_Prices T
WHERE quoteID = @Max_QuoteID

INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT symbol,effective_date as as_of_date, s_key ,NULL,s_value,GETDATE()
FROM (SELECT symbol,effective_date,[low],[high],[open],[close],[percent] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID) P
UNPIVOT  (s_value FOR s_key IN ([low],[high],[open],[close],[percent]))AS unpvt

--Needle Pattern
DECLARE @Open [decimal](18, 2),@High [decimal](18, 2),@Close [decimal](18, 2),@Low [decimal](18, 2)
DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)

SELECT @Low  =[low],@High = [high],@Open=[open],@Close=[close] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID

SET @Upper_shadow = (@High - CASE WHEN @Open > @Close THEN @Open ELSE @Close END) / @Open *100
SET @Lower_shadow = (CASE WHEN @Open < @Close THEN @Open ELSE @Close END - @Low) / @Open  * 100
SET @Body = ABS(@Close-@Open)/@Open * 100

IF @Lower_shadow > @Body 
AND (@Lower_shadow >0.8)
--AND (@Upper_shadow < 0.3) 
--AND (@Close > @Open)

BEGIN
	INSERT INTO BackTest_Strategy_Peak_V2
	(symbol,as_of_date,s_key,s_date,s_value,update_date)
	SELECT symbol,effective_date as as_of_date,'Needle',NULL,@Lower_shadow,GETDATE()
	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
END 

IF @Body > 3
AND (@Lower_shadow < 0.5)
AND (@Upper_shadow < 0.5) 
AND (@Close > @Open)

BEGIN
	INSERT INTO BackTest_Strategy_Peak_V2
	(symbol,as_of_date,s_key,s_date,s_value,update_date)
	SELECT symbol,effective_date as as_of_date,'LongGreen',NULL,@Lower_shadow,GETDATE()
	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
END 

IF @Body > 3
AND (@Lower_shadow < 0.5)
AND (@Upper_shadow < 0.5) 
AND (@Close < @Open)

BEGIN
	INSERT INTO BackTest_Strategy_Peak_V2
	(symbol,as_of_date,s_key,s_date,s_value,update_date)
	SELECT symbol,effective_date as as_of_date,'LongRed',NULL,@Lower_shadow,GETDATE()
	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
END 


SET @OutputDateTime =@Max_EffectiveDate

-- All Time High


END

