USE [master]
GO
/****** Object:  Database [SATS]    Script Date: 10/4/2024 10:11:38 AM ******/
CREATE DATABASE [SATS]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'SATS', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\SATS.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'SATS_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\SATS_log.ldf' , SIZE = 401408KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [SATS] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [SATS].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [SATS] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [SATS] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [SATS] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [SATS] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [SATS] SET ARITHABORT OFF 
GO
ALTER DATABASE [SATS] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [SATS] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [SATS] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [SATS] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [SATS] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [SATS] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [SATS] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [SATS] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [SATS] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [SATS] SET  DISABLE_BROKER 
GO
ALTER DATABASE [SATS] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [SATS] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [SATS] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [SATS] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [SATS] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [SATS] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [SATS] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [SATS] SET RECOVERY FULL 
GO
ALTER DATABASE [SATS] SET  MULTI_USER 
GO
ALTER DATABASE [SATS] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [SATS] SET DB_CHAINING OFF 
GO
ALTER DATABASE [SATS] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [SATS] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [SATS] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [SATS] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'SATS', N'ON'
GO
ALTER DATABASE [SATS] SET QUERY_STORE = OFF
GO
USE [SATS]
GO
/****** Object:  Table [dbo].[BackTest_BatchData]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BackTest_BatchData](
	[batchID] [int] NOT NULL,
	[batchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[effective_date] [date] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BackTest_Prices]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BackTest_Prices](
	[batchID] [uniqueidentifier] NOT NULL,
	[BatchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[change] [decimal](18, 4) NULL,
	[effective_date] [date] NULL,
	[SMA10] [decimal](18, 2) NULL,
	[SMA20] [decimal](18, 2) NULL,
	[SMA50] [decimal](18, 2) NULL,
	[SMA100] [decimal](18, 2) NULL,
	[SMA200] [decimal](18, 2) NULL,
	[EMA5] [decimal](18, 2) NULL,
	[EMA12] [decimal](18, 2) NULL,
	[EMA26] [decimal](18, 2) NULL,
	[PeakType] [nvarchar](10) NULL,
	[IsNoise] [bit] NULL,
	[IsNoise2] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Backtest_Results]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Backtest_Results](
	[TradeID] [int] IDENTITY(1,1) NOT NULL,
	[Symbol] [varchar](10) NULL,
	[EntryPrice] [decimal](18, 4) NULL,
	[ExitPrice] [decimal](18, 4) NULL,
	[Quantity] [int] NULL,
	[EntryDate] [datetime] NULL,
	[ExitDate] [datetime] NULL,
	[Profit] [decimal](18, 4) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BackTest_Strategy_Peak_V2]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BackTest_Strategy_Peak_V2](
	[symbol] [varchar](10) NOT NULL,
	[as_of_date] [datetime] NULL,
	[s_key] [varchar](10) NULL,
	[s_date] [datetime] NULL,
	[s_value] [decimal](18, 2) NULL,
	[update_date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EODHD_Crypto]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EODHD_Crypto](
	[s] [varchar](20) NULL,
	[p] [varchar](20) NULL,
	[q] [varchar](20) NULL,
	[dc] [varchar](20) NULL,
	[dd] [varchar](20) NULL,
	[t] [varchar](40) NULL,
	[Update_Date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EODHD_EndOfDay]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EODHD_EndOfDay](
	[Symbol] [varchar](10) NULL,
	[TradeTime] [datetime] NULL,
	[Open] [decimal](18, 2) NULL,
	[High] [decimal](18, 2) NULL,
	[Low] [decimal](18, 2) NULL,
	[Close] [decimal](18, 2) NULL,
	[Adjusted_Close] [decimal](18, 2) NULL,
	[Interval] [varchar](10) NULL,
	[Update_Date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EODHD_Intraday]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EODHD_Intraday](
	[Symbol] [varchar](10) NULL,
	[TradeTime] [datetime] NULL,
	[Open] [decimal](6, 2) NULL,
	[High] [decimal](6, 2) NULL,
	[Low] [decimal](6, 2) NULL,
	[Close] [decimal](6, 2) NULL,
	[Volume] [int] NULL,
	[Interval] [varchar](10) NULL,
	[Update_Date] [datetime] NULL,
	[Trade_Time] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EODHD_Live]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EODHD_Live](
	[s] [varchar](20) NULL,
	[p] [varchar](20) NULL,
	[ms] [varchar](20) NULL,
	[t] [varchar](40) NULL,
	[Update_Date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IB_Live]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IB_Live](
	[symbol] [varchar](20) NULL,
	[p] [decimal](6, 2) NULL,
	[Update_Date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Market_EOD]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Market_EOD](
	[Symbol] [varchar](10) NULL,
	[Trade_Time] [datetime] NULL,
	[Open] [decimal](18, 2) NULL,
	[High] [decimal](18, 2) NULL,
	[Low] [decimal](18, 2) NULL,
	[Close] [decimal](18, 2) NULL,
	[Adjusted_Close] [decimal](18, 2) NULL,
	[Interval] [varchar](10) NULL,
	[Source] [varchar](20) NULL,
	[Update_Time] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Market_Intraday]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Market_Intraday](
	[Symbol] [varchar](10) NULL,
	[Trade_Time] [datetime] NULL,
	[Open] [decimal](18, 2) NULL,
	[High] [decimal](18, 2) NULL,
	[Low] [decimal](18, 2) NULL,
	[Close] [decimal](18, 2) NULL,
	[Adjusted_Close] [decimal](18, 2) NULL,
	[Interval] [varchar](10) NULL,
	[Source] [varchar](20) NULL,
	[Update_Time] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Market_RealTime]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Market_RealTime](
	[Symbol] [varchar](20) NULL,
	[Price] [decimal](6, 2) NULL,
	[Trade_Time] [datetime] NULL,
	[Source] [varchar](20) NULL,
	[Update_Time] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QQQ_EOD]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QQQ_EOD](
	[symbolId] [int] NULL,
	[start] [varchar](50) NULL,
	[end] [varchar](50) NULL,
	[interval] [varchar](20) NULL,
	[Open] [decimal](6, 2) NULL,
	[High] [decimal](6, 2) NULL,
	[Low] [decimal](6, 2) NULL,
	[Close] [decimal](6, 2) NULL,
	[Adjusted_close] [decimal](6, 2) NULL,
	[Volume] [int] NULL,
	[update_date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QQQ_Live]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QQQ_Live](
	[symbol] [varchar](20) NULL,
	[symbolId] [int] NULL,
	[lastTradePrice] [decimal](10, 2) NULL,
	[lastTradeTime] [varchar](50) NULL,
	[update_time] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Trade_Orders]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trade_Orders](
	[TradeID] [int] IDENTITY(1,1) NOT NULL,
	[Symbol] [varchar](10) NULL,
	[OrderType] [nvarchar](4) NULL,
	[Price] [decimal](18, 2) NULL,
	[Quantity] [int] NULL,
	[effictive_date] [datetime] NULL,
	[IsExit] [bit] NULL,
	[ExitTradeID] [int] NULL,
	[update_time] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[TradeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Trade_Position]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trade_Position](
	[Symbol] [varchar](10) NULL,
	[effictive_date] [datetime] NULL,
	[TradeID] [int] NULL,
	[Price] [decimal](18, 2) NULL,
	[Quantity] [int] NULL,
	[TotalCost] [decimal](18, 2) NULL,
	[update_time] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Trade_Transactions]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trade_Transactions](
	[Symbol] [varchar](10) NULL,
	[EntryPrice] [decimal](18, 4) NULL,
	[EntryID] [int] NULL,
	[ExitPrice] [decimal](18, 4) NULL,
	[ExitID] [int] NULL,
	[Quantity] [int] NULL,
	[EntryDate] [datetime] NULL,
	[ExitDate] [datetime] NULL,
	[Profit] [decimal](18, 4) NULL
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[EODHD_Crypto] ADD  CONSTRAINT [CT_Crypto]  DEFAULT (getdate()) FOR [Update_Date]
GO
ALTER TABLE [dbo].[EODHD_EndOfDay] ADD  CONSTRAINT [CT_EndOfDay]  DEFAULT (getdate()) FOR [Update_Date]
GO
ALTER TABLE [dbo].[EODHD_Intraday] ADD  CONSTRAINT [CT_EODHDIntraday]  DEFAULT (getdate()) FOR [Update_Date]
GO
ALTER TABLE [dbo].[EODHD_Live] ADD  CONSTRAINT [CT_Live]  DEFAULT (getdate()) FOR [Update_Date]
GO
ALTER TABLE [dbo].[IB_Live] ADD  CONSTRAINT [CT_IBLive]  DEFAULT (getdate()) FOR [Update_Date]
GO
ALTER TABLE [dbo].[Market_EOD] ADD  CONSTRAINT [CT_Market_EOD]  DEFAULT (getdate()) FOR [Update_Time]
GO
ALTER TABLE [dbo].[Market_Intraday] ADD  CONSTRAINT [CT_Market_Intraday]  DEFAULT (getdate()) FOR [Update_Time]
GO
ALTER TABLE [dbo].[Market_RealTime] ADD  CONSTRAINT [CT_Market_RealTime]  DEFAULT (getdate()) FOR [Update_Time]
GO
ALTER TABLE [dbo].[QQQ_EOD] ADD  DEFAULT (getdate()) FOR [update_date]
GO
ALTER TABLE [dbo].[QQQ_Live] ADD  DEFAULT (getdate()) FOR [update_time]
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Batch]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[BackTest_Batch] 
	@symbol NVARCHAR(20),
	@StartDate DATETIME,
	@EndDate DATETIME


AS
BEGIN

DECLARE @Effective_Date_Loop DATETIME

DECLARE @quoteID INT
DECLARE @BatchID INT

DECLARE @BatchDate DATETIME


SET @Effective_Date_Loop = (SELECT MIN([Trade_Time]) FROM dbo.Market_EOD	WHERE symbol =@symbol AND [Trade_Time] >= @StartDate)

SET @BatchDate = GETDATE()
SET @BatchID = CONCAT(DATEPART(HOUR,@BatchDate),DATEPART(MINUTE,@BatchDate),DATEPART(SECOND,@BatchDate),DATEPART(millisecond,GETDATE()))
SET @quoteID=1

IF OBJECT_ID('tempdb..#TB') IS NOT NULL 
BEGIN
    DROP TABLE #TB
END

SELECT [symbol],[low],[high],[open],[close],[Trade_Time]
INTO #TB
FROM dbo.Market_EOD
WHERE symbol =@symbol AND [Trade_Time] > = @Effective_Date_Loop AND [Trade_Time]< @EndDate
CREATE UNIQUE CLUSTERED INDEX TB_IDX ON #TB ([Trade_Time])

WHILE (@Effective_Date_Loop<@EndDate)
BEGIN

	INSERT INTO BackTest_BatchData
	([batchID],[BatchDate],[symbol],[low],[high],[open],[close],[effective_date],quoteID)
	SELECT @BatchID,@BatchDate,[symbol],[low],[high],[open],[close],[Trade_Time],@quoteID 
	FROM #TB
	WHERE [Trade_Time] = @Effective_Date_Loop

	-- Execute the actual strategy
	--EXEC [BackTest_Strategy_01_MACD_V2] @BatchID
	--EXEC [BackTest_Strategy_01_Peak_V2] @BatchID

	SELECT @Effective_Date_Loop = MIN([Trade_Time]) FROM #TB	WHERE [Trade_Time] > @Effective_Date_Loop
	SET @quoteID = @quoteID + 1 

END

RETURN @BatchID
END 



GO
/****** Object:  StoredProcedure [dbo].[BackTest_Loop]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[BackTest_Loop] 
	@symbol NVARCHAR(20),
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN

DECLARE @Date_Loop DATETIME
SET @Date_Loop = @StartDate

WHILE (@Date_Loop<= @EndDate)
BEGIN
	DECLARE @BatchID INT
	DECLARE @CurrentDate DATETIME

	SET @Date_Loop = (SELECT MIN (TRADE_TIME) FROM Market_EOD WHERE Trade_Time >= @Date_Loop)

	EXEC @BatchID = BackTest_Batch @symbol,@StartDate,@Date_Loop

	EXEC [BackTest_Strategy_01_MACD_V2] @BatchID
	EXEC [BackTest_Strategy_01_Peak_V2] @BatchID

	SET @Date_Loop = DATEADD(DD,1,@Date_Loop)
END

END 



GO
/****** Object:  StoredProcedure [dbo].[BackTest_Strategy_01_MACD_V2]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[BackTest_Strategy_01_MACD_V2]
@BatchID INT
	-- Add the parameters for the stored procedure here
AS
BEGIN

DECLARE @MaxQuoteID INT

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

CREATE TABLE #BackTest_Prices(
	[batchID] [INT] NOT NULL,
	[BatchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[effective_date] [date] NULL,
	[SMA10] [decimal](18, 2) NULL,
	[SMA20] [decimal](18, 2) NULL,
	[SMA50] [decimal](18, 2) NULL,
	[SMA100] [decimal](18, 2) NULL,
	[SMA200] [decimal](18, 2) NULL,
	[EMA5] [decimal](18, 2) NULL,
	[EMA12] [decimal](18, 2) NULL,
	[EMA26] [decimal](18, 2) NULL,
) 

INSERT INTO #BackTest_Prices
([batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date])
SELECT [batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date]
FROM [BackTest_BatchData]
WHERE batchID = @BatchID

SET @MaxQuoteID = (SELECT MAX(QuoteID) FROM #BackTest_Prices WHERE batchID = @BatchID)

UPDATE P
SET P.SMA10 =NULL, P.SMA20 =NULL, P.SMA50 = NULL,P.SMA100 =NULL,P.SMA200 =NULL, P.EMA5 = NULL, P.EMA12 = NULL, P.EMA26 = NULL
FROM #BackTest_Prices P 
WHERE batchID= @BatchID


UPDATE T0
SET SMA10 = T1.SMA10,
	SMA20 = T1.SMA20,
	SMA50 = T1.SMA50,
	SMA100 =T1.SMA100,
	SMA200 = T1.SMA200 
FROM #BackTest_Prices T0 INNER JOIN (SELECT quoteID,CASE WHEN quoteID<10 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 9 PRECEDING) END AS SMA10,
												   CASE WHEN quoteID<20 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 19 PRECEDING) END AS SMA20,
												   CASE WHEN quoteID<50 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 49 PRECEDING) END AS SMA50,
												   CASE WHEN quoteID<100 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 99 PRECEDING) END AS SMA100,
												   CASE WHEN quoteID<200 THEN NULL ELSE AVG([Close]) OVER (PARTITION BY symbol ORDER BY QuoteId ROWS 199 PRECEDING) END AS SMA200
									FROM #BackTest_Prices WHERE batchID= @BatchID) T1 ON T0.quoteID=T1.QuoteID
WHERE batchID= @BatchID

DECLARE @start_Avg5 DECIMAL(18,2)
DECLARE @Start_Avg12 DECIMAL(18,2)
DECLARE @Start_Avg26 DECIMAL(18,2)

DECLARE @EMA5 FLOAT
DECLARE @EMA12 FLOAT
DECLARE @EMA26 FLOAT

SELECT @Start_Avg5 = AVG([Close])  FROM #BackTest_Prices WHERE batchID=@BatchID AND QuoteId <= 5 
SELECT @Start_Avg12 = AVG([Close])  FROM #BackTest_Prices WHERE batchID=@BatchID AND QuoteId <= 12 
SELECT @Start_Avg26 = AVG([Close])  FROM #BackTest_Prices WHERE batchID=@BatchID AND QuoteId <= 26 

DECLARE @C_5 FLOAT = 2.0 / (1 + 5)
DECLARE @C_12 FLOAT = 2.0 / (1 + 12)
DECLARE @C_26 FLOAT = 2.0 / (1 + 26)

UPDATE P
SET    @EMA5 = CASE WHEN QuoteId < 5 THEN NULL
					 WHEN QuoteId = 5 THEN @Start_Avg5
					 WHEN QuoteId > 5 THEN P.[Close] * @C_5 + @EMA5 * (1 - @C_5)
                END
	  ,EMA5 = @EMA5
	  ,@EMA12 = CASE WHEN QuoteId < 12 THEN NULL
					 WHEN QuoteId = 12 THEN @Start_Avg12
					 WHEN QuoteId > 12 THEN P.[Close] * @C_12 + @EMA12 * (1 - @C_12)
                END
	  ,EMA12 = @EMA12
	  ,@EMA26 = CASE WHEN QuoteId < 26 THEN NULL
					 WHEN QuoteId = 26 THEN @Start_Avg26
					 WHEN QuoteId > 26 THEN P.[Close] * @C_26 + @EMA26 * (1 - @C_26)
			   END
      ,EMA26 = @EMA26
FROM #BackTest_Prices P WHERE batchID=@BatchID

INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT symbol,effective_date as as_of_date, s_key ,NULL,s_value,GETDATE()
FROM (SELECT symbol,effective_date,SMA10,SMA20,SMA50,SMA100,SMA200,EMA5,EMA12,EMA26 FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@MaxQuoteID) P
UNPIVOT  (s_value FOR s_key IN (SMA10,SMA20,SMA50,SMA100,SMA200,EMA5,EMA12,EMA26))AS unpvt

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

END
GO
/****** Object:  StoredProcedure [dbo].[BackTest_Strategy_01_Peak_V2]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[BackTest_Strategy_01_Peak_V2]
@BatchID INT
	-- Add the parameters for the stored procedure here
AS
BEGIN

DECLARE @Bar_Gap INT
SET @Bar_Gap=1

IF OBJECT_ID('tempdb..#BackTest_Prices') IS NOT NULL
    DROP TABLE #BackTest_Prices

CREATE TABLE #BackTest_Prices(
	[batchID] [INT] NOT NULL,
	[BatchDate] [datetime] NULL,
	[symbol] [varchar](20) NULL,
	[quoteID] [int] NULL,
	[low] [decimal](18, 2) NULL,
	[high] [decimal](18, 2) NULL,
	[open] [decimal](18, 2) NULL,
	[close] [decimal](18, 2) NULL,
	[effective_date] [date] NULL,
	[percent] [decimal](18, 2) NULL,
	[Peak_High] [bit] NULL,
	[Peak_Low] [bit] NULL)

INSERT INTO #BackTest_Prices
([batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date])
SELECT [batchID],[batchDate],[symbol],[quoteID],[low],[high],[open],[close],[effective_date]
FROM [BackTest_BatchData]
WHERE batchID = @BatchID

DECLARE @Diff_Percent DECIMAL (10,4)
SET @Diff_Percent = 0


DECLARE @Low_QuoteID INT
DECLARE @High_QuoteID INT

DECLARE @LoopID INT
DECLARE @Max_QuoteID INT
DECLARE @Max_EffectiveDate DATETIME

DECLARE @Last_Close [decimal](18, 2)
DECLARE @Current_Close [decimal](18, 2) 

SET @LoopID = 1
SELECT @Max_QuoteID = MAX(quoteID ) FROM #BackTest_Prices WHERE batchID = @BatchID
SELECT @Max_EffectiveDate = effective_date FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID



WHILE (@LoopID + @Bar_Gap) <= @Max_QuoteID
BEGIN
	PRINT 'LoopID: '+ CAST( @LoopID AS NVARCHAR)

    SELECT @Low_QuoteID= quoteID 
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [low] ASC ) as Low_RowNum, *
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap) )
		   )x
    WHERE Low_RowNum = 1 
	
	PRINT 'Low_quoteID:'+ CAST (@Low_quoteID AS NVARCHAR)

	SELECT @High_QuoteID = quoteID
    FROM  (SELECT ROW_NUMBER() OVER (PARTITION BY batchID ORDER BY [High] DESC ) as High_RowNum,*
		   FROM #BackTest_Prices WHERE batchID= @BatchID AND ((@LoopID-@Bar_Gap) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap) )
		   ) x
    WHERE High_RowNum =1

	PRINT 'High_quoteID:'+ CAST (@High_QuoteID AS NVARCHAR)

	UPDATE T
	SET T.Peak_High = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@High_QuoteID AND T.Peak_High IS NULL

	UPDATE T
	SET T.Peak_High = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@High_QuoteID AND (@LoopID-@Bar_Gap) <= quoteID AND quoteID <=(@LoopID+@Bar_Gap)

	
	UPDATE T
	SET T.Peak_Low = 1
	FROM #BackTest_Prices T
	WHERE quoteID=@Low_QuoteID AND T.Peak_Low IS NULL

	UPDATE T
	SET T.Peak_Low = 0
	FROM #BackTest_Prices T
	WHERE quoteID <>@Low_QuoteID AND (@LoopID-@Bar_Gap) <= quoteID AND quoteID <= (@LoopID+@Bar_Gap)

	SET @LoopID=@LoopID+1

END

-- Peak and Low
INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT  symbol,@Max_EffectiveDate,
		CASE WHEN Peak_High =1 THEN 'Peak' WHEN Peak_Low=1 THEN 'Low' END AS s_key,
		effective_date as s_date,
		CASE WHEN Peak_High =1 THEN [high] WHEN Peak_Low=1 THEN [Low] END AS s_value, 
		GETDATE() 
FROM #BackTest_Prices
WHERE Peak_High =1 OR Peak_Low =1

-- Percent and Daily
SELECT @Last_Close =  (SELECT [close] FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID -1 )
SELECT @Current_Close =  (SELECT [close] FROM #BackTest_Prices WHERE batchID = @BatchID AND quoteID = @Max_QuoteID)
SET @Last_Close = ISNULL(@Last_Close,@Current_Close)

UPDATE T
SET T.[percent] = (@Last_Close-@Current_Close)/@Last_Close*100
FROM #BackTest_Prices T
WHERE quoteID = @LoopID

INSERT INTO BackTest_Strategy_Peak_V2
(symbol,as_of_date,s_key,s_date,s_value,update_date)
SELECT symbol,effective_date as as_of_date, s_key ,NULL,s_value,GETDATE()
FROM (SELECT symbol,effective_date,[low],[high],[open],[close],[percent] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID) P
UNPIVOT  (s_value FOR s_key IN ([low],[high],[open],[close],[percent]))AS unpvt

--Needle Pattern
DECLARE @Open [decimal](18, 2),@High [decimal](18, 2),@Close [decimal](18, 2),@Low [decimal](18, 2)
DECLARE @Upper_shadow [decimal](18, 2),@Lower_shadow [decimal](18, 2),@Body [decimal](18, 2)

SELECT @Low  =[low],@High = [high],@Open=[open],@Close=[close] FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID

SET @Upper_shadow = (@High - CASE WHEN @Open > @Close THEN @Open ELSE @Close END) / @Open *100
SET @Lower_shadow = (CASE WHEN @Open < @Close THEN @Open ELSE @Close END - @Low) / @Open  * 100
SET @Body = ABS(@Close-@Open)/@Open * 100

IF @Lower_shadow > @Body 
AND (@Lower_shadow >0.5)
AND (@Upper_shadow < 0.3) 
AND (@Close > @Open)
BEGIN
	INSERT INTO BackTest_Strategy_Peak_V2
	(symbol,as_of_date,s_key,s_date,s_value,update_date)
	SELECT symbol,effective_date as as_of_date,'Needle',NULL,@Lower_shadow,GETDATE()
	FROM #BackTest_Prices WHERE batchID=@BatchID AND quoteID=@Max_QuoteID
END 

END

GO
/****** Object:  StoredProcedure [dbo].[Trade_ExecuteOrder]    Script Date: 10/4/2024 10:11:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Trade_ExecuteOrder](
    @Symbol VARCHAR(10),
    @OrderType VARCHAR(10), -- 'BUY' or 'SELL'
    @Price DECIMAL(18, 4),
	@effictive_date DATETIME,
    @Quantity INT
) AS

BEGIN
    INSERT INTO Trade_Orders (Symbol, OrderType, Price, Quantity,effictive_date, update_time)
    VALUES (@Symbol, @OrderType, @Price, @Quantity, @effictive_date,GETDATE());

    -- Call external broker API to place the trade
END;

GO
USE [master]
GO
ALTER DATABASE [SATS] SET  READ_WRITE 
GO
